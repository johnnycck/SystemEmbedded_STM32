
Embedded_OS_Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001f58  08001f58  00011f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f70  08001f70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001f70  08001f70  00011f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f78  08001f78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f78  08001f78  00011f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f7c  08001f7c  00011f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08001f8c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08001f8c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb7a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b7a  00000000  00000000  0002bbb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  0002d730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  0002e2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020970  00000000  00000000  0002edb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000910a  00000000  00000000  0004f728  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc489  00000000  00000000  00058832  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124cbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff0  00000000  00000000  00124d38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001f40 	.word	0x08001f40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08001f40 	.word	0x08001f40

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 f9ac 	bl	8000830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f804 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f860 	bl	80005a0 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x10>
	...

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b094      	sub	sp, #80	; 0x50
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0320 	add.w	r3, r7, #32
 80004ee:	2230      	movs	r2, #48	; 0x30
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 fd1c 	bl	8001f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000508:	2300      	movs	r3, #0
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	4b22      	ldr	r3, [pc, #136]	; (8000598 <SystemClock_Config+0xb4>)
 800050e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000510:	4a21      	ldr	r2, [pc, #132]	; (8000598 <SystemClock_Config+0xb4>)
 8000512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000516:	6413      	str	r3, [r2, #64]	; 0x40
 8000518:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <SystemClock_Config+0xb4>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <SystemClock_Config+0xb8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a1b      	ldr	r2, [pc, #108]	; (800059c <SystemClock_Config+0xb8>)
 800052e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <SystemClock_Config+0xb8>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000540:	2302      	movs	r3, #2
 8000542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000548:	2310      	movs	r3, #16
 800054a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800054c:	2300      	movs	r3, #0
 800054e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	f107 0320 	add.w	r3, r7, #32
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fc43 	bl	8000de0 <HAL_RCC_OscConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000560:	f000 f882 	bl	8000668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	230f      	movs	r3, #15
 8000566:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fe9e 	bl	80012c0 <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800058a:	f000 f86d 	bl	8000668 <Error_Handler>
  }
}
 800058e:	bf00      	nop
 8000590:	3750      	adds	r7, #80	; 0x50
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40023800 	.word	0x40023800
 800059c:	40007000 	.word	0x40007000

080005a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_GPIO_Init+0x98>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <MX_GPIO_Init+0x98>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <MX_GPIO_Init+0x98>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_GPIO_Init+0x98>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a17      	ldr	r2, [pc, #92]	; (8000638 <MX_GPIO_Init+0x98>)
 80005dc:	f043 0308 	orr.w	r3, r3, #8
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_GPIO_Init+0x98>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0308 	and.w	r3, r3, #8
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80005f4:	4811      	ldr	r0, [pc, #68]	; (800063c <MX_GPIO_Init+0x9c>)
 80005f6:	f000 fbd9 	bl	8000dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80005fa:	2301      	movs	r3, #1
 80005fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4619      	mov	r1, r3
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <MX_GPIO_Init+0xa0>)
 800060e:	f000 fa33 	bl	8000a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000612:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	2301      	movs	r3, #1
 800061a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	4619      	mov	r1, r3
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_GPIO_Init+0x9c>)
 800062c:	f000 fa24 	bl	8000a78 <HAL_GPIO_Init>

}
 8000630:	bf00      	nop
 8000632:	3720      	adds	r7, #32
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40020c00 	.word	0x40020c00
 8000640:	40020000 	.word	0x40020000

08000644 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a04      	ldr	r2, [pc, #16]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d101      	bne.n	800065a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000656:	f000 f90d 	bl	8000874 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40001000 	.word	0x40001000

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066e:	e7fe      	b.n	800066e <Error_Handler+0x6>

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <HAL_MspInit+0x4c>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <HAL_MspInit+0x4c>)
 8000680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000684:	6453      	str	r3, [r2, #68]	; 0x44
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <HAL_MspInit+0x4c>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_MspInit+0x4c>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <HAL_MspInit+0x4c>)
 800069c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a0:	6413      	str	r3, [r2, #64]	; 0x40
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_MspInit+0x4c>)
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08c      	sub	sp, #48	; 0x30
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	2036      	movs	r0, #54	; 0x36
 80006d6:	f000 f9a5 	bl	8000a24 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006da:	2036      	movs	r0, #54	; 0x36
 80006dc:	f000 f9be 	bl	8000a5c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <HAL_InitTick+0xa0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <HAL_InitTick+0xa0>)
 80006ea:	f043 0310 	orr.w	r3, r3, #16
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <HAL_InitTick+0xa0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 0310 	and.w	r3, r3, #16
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006fc:	f107 0210 	add.w	r2, r7, #16
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4611      	mov	r1, r2
 8000706:	4618      	mov	r0, r3
 8000708:	f000 ff92 	bl	8001630 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800070c:	f000 ff7c 	bl	8001608 <HAL_RCC_GetPCLK1Freq>
 8000710:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000714:	4a13      	ldr	r2, [pc, #76]	; (8000764 <HAL_InitTick+0xa4>)
 8000716:	fba2 2303 	umull	r2, r3, r2, r3
 800071a:	0c9b      	lsrs	r3, r3, #18
 800071c:	3b01      	subs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_InitTick+0xa8>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <HAL_InitTick+0xac>)
 8000724:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <HAL_InitTick+0xa8>)
 8000728:	f240 32e7 	movw	r2, #999	; 0x3e7
 800072c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800072e:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <HAL_InitTick+0xa8>)
 8000730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000732:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <HAL_InitTick+0xa8>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <HAL_InitTick+0xa8>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <HAL_InitTick+0xa8>)
 8000742:	f000 ffa7 	bl	8001694 <HAL_TIM_Base_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d104      	bne.n	8000756 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800074c:	4806      	ldr	r0, [pc, #24]	; (8000768 <HAL_InitTick+0xa8>)
 800074e:	f000 ffd6 	bl	80016fe <HAL_TIM_Base_Start_IT>
 8000752:	4603      	mov	r3, r0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	3730      	adds	r7, #48	; 0x30
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	431bde83 	.word	0x431bde83
 8000768:	200000b4 	.word	0x200000b4
 800076c:	40001000 	.word	0x40001000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <MemManage_Handler+0x4>

08000782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <UsageFault_Handler+0x4>

0800078e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007a0:	4802      	ldr	r0, [pc, #8]	; (80007ac <TIM6_DAC_IRQHandler+0x10>)
 80007a2:	f000 ffd0 	bl	8001746 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000b4 	.word	0x200000b4

080007b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <SystemInit+0x28>)
 80007b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ba:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <SystemInit+0x28>)
 80007bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SystemInit+0x28>)
 80007c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007ca:	609a      	str	r2, [r3, #8]
#endif
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000814 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80007e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80007e2:	e003      	b.n	80007ec <LoopCopyDataInit>

080007e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80007e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80007e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80007ea:	3104      	adds	r1, #4

080007ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80007f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007f4:	d3f6      	bcc.n	80007e4 <CopyDataInit>
  ldr  r2, =_sbss
 80007f6:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80007f8:	e002      	b.n	8000800 <LoopFillZerobss>

080007fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80007fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80007fc:	f842 3b04 	str.w	r3, [r2], #4

08000800 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000802:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000804:	d3f9      	bcc.n	80007fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000806:	f7ff ffd3 	bl	80007b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800080a:	f001 fb6d 	bl	8001ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800080e:	f7ff fe5f 	bl	80004d0 <main>
  bx  lr    
 8000812:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000814:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000818:	08001f80 	.word	0x08001f80
  ldr  r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000820:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000824:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000828:	200000f8 	.word	0x200000f8

0800082c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC_IRQHandler>
	...

08000830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <HAL_Init+0x40>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <HAL_Init+0x40>)
 800083a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800083e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <HAL_Init+0x40>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <HAL_Init+0x40>)
 8000846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800084a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_Init+0x40>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a07      	ldr	r2, [pc, #28]	; (8000870 <HAL_Init+0x40>)
 8000852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000858:	2003      	movs	r0, #3
 800085a:	f000 f8d8 	bl	8000a0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085e:	2000      	movs	r0, #0
 8000860:	f7ff ff2e 	bl	80006c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000864:	f7ff ff04 	bl	8000670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023c00 	.word	0x40023c00

08000874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_IncTick+0x20>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_IncTick+0x24>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4413      	add	r3, r2
 8000884:	4a04      	ldr	r2, [pc, #16]	; (8000898 <HAL_IncTick+0x24>)
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	20000008 	.word	0x20000008
 8000898:	200000f4 	.word	0x200000f4

0800089c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return uwTick;
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <HAL_GetTick+0x14>)
 80008a2:	681b      	ldr	r3, [r3, #0]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	200000f4 	.word	0x200000f4

080008b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <__NVIC_SetPriorityGrouping+0x44>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008d0:	4013      	ands	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e6:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <__NVIC_SetPriorityGrouping+0x44>)
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	60d3      	str	r3, [r2, #12]
}
 80008ec:	bf00      	nop
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <__NVIC_GetPriorityGrouping+0x18>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	0a1b      	lsrs	r3, r3, #8
 8000906:	f003 0307 	and.w	r3, r3, #7
}
 800090a:	4618      	mov	r0, r3
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	2b00      	cmp	r3, #0
 8000928:	db0b      	blt.n	8000942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	f003 021f 	and.w	r2, r3, #31
 8000930:	4907      	ldr	r1, [pc, #28]	; (8000950 <__NVIC_EnableIRQ+0x38>)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	095b      	lsrs	r3, r3, #5
 8000938:	2001      	movs	r0, #1
 800093a:	fa00 f202 	lsl.w	r2, r0, r2
 800093e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000e100 	.word	0xe000e100

08000954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db0a      	blt.n	800097e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	490c      	ldr	r1, [pc, #48]	; (80009a0 <__NVIC_SetPriority+0x4c>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	440b      	add	r3, r1
 8000978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800097c:	e00a      	b.n	8000994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4908      	ldr	r1, [pc, #32]	; (80009a4 <__NVIC_SetPriority+0x50>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	3b04      	subs	r3, #4
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	440b      	add	r3, r1
 8000992:	761a      	strb	r2, [r3, #24]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b089      	sub	sp, #36	; 0x24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f1c3 0307 	rsb	r3, r3, #7
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	bf28      	it	cs
 80009c6:	2304      	movcs	r3, #4
 80009c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3304      	adds	r3, #4
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d902      	bls.n	80009d8 <NVIC_EncodePriority+0x30>
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3b03      	subs	r3, #3
 80009d6:	e000      	b.n	80009da <NVIC_EncodePriority+0x32>
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43da      	mvns	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	401a      	ands	r2, r3
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	43d9      	mvns	r1, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	4313      	orrs	r3, r2
         );
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3724      	adds	r7, #36	; 0x24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ff4c 	bl	80008b4 <__NVIC_SetPriorityGrouping>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
 8000a30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a36:	f7ff ff61 	bl	80008fc <__NVIC_GetPriorityGrouping>
 8000a3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	68b9      	ldr	r1, [r7, #8]
 8000a40:	6978      	ldr	r0, [r7, #20]
 8000a42:	f7ff ffb1 	bl	80009a8 <NVIC_EncodePriority>
 8000a46:	4602      	mov	r2, r0
 8000a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ff80 	bl	8000954 <__NVIC_SetPriority>
}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ff54 	bl	8000918 <__NVIC_EnableIRQ>
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b089      	sub	sp, #36	; 0x24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
 8000a92:	e16b      	b.n	8000d6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a94:	2201      	movs	r2, #1
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	f040 815a 	bne.w	8000d66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d00b      	beq.n	8000ad2 <HAL_GPIO_Init+0x5a>
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d007      	beq.n	8000ad2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac6:	2b11      	cmp	r3, #17
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	2b12      	cmp	r3, #18
 8000ad0:	d130      	bne.n	8000b34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	2203      	movs	r2, #3
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	69ba      	ldr	r2, [r7, #24]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b08:	2201      	movs	r2, #1
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	4013      	ands	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	091b      	lsrs	r3, r3, #4
 8000b1e:	f003 0201 	and.w	r2, r3, #1
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	2203      	movs	r2, #3
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	689a      	ldr	r2, [r3, #8]
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d003      	beq.n	8000b74 <HAL_GPIO_Init+0xfc>
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b12      	cmp	r3, #18
 8000b72:	d123      	bne.n	8000bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	08da      	lsrs	r2, r3, #3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3208      	adds	r2, #8
 8000b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	220f      	movs	r2, #15
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	4013      	ands	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	691a      	ldr	r2, [r3, #16]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	08da      	lsrs	r2, r3, #3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3208      	adds	r2, #8
 8000bb6:	69b9      	ldr	r1, [r7, #24]
 8000bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 0203 	and.w	r2, r3, #3
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 80b4 	beq.w	8000d66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b5f      	ldr	r3, [pc, #380]	; (8000d80 <HAL_GPIO_Init+0x308>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	4a5e      	ldr	r2, [pc, #376]	; (8000d80 <HAL_GPIO_Init+0x308>)
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0e:	4b5c      	ldr	r3, [pc, #368]	; (8000d80 <HAL_GPIO_Init+0x308>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c1a:	4a5a      	ldr	r2, [pc, #360]	; (8000d84 <HAL_GPIO_Init+0x30c>)
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	089b      	lsrs	r3, r3, #2
 8000c20:	3302      	adds	r3, #2
 8000c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	220f      	movs	r2, #15
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a51      	ldr	r2, [pc, #324]	; (8000d88 <HAL_GPIO_Init+0x310>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d02b      	beq.n	8000c9e <HAL_GPIO_Init+0x226>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a50      	ldr	r2, [pc, #320]	; (8000d8c <HAL_GPIO_Init+0x314>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d025      	beq.n	8000c9a <HAL_GPIO_Init+0x222>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a4f      	ldr	r2, [pc, #316]	; (8000d90 <HAL_GPIO_Init+0x318>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d01f      	beq.n	8000c96 <HAL_GPIO_Init+0x21e>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a4e      	ldr	r2, [pc, #312]	; (8000d94 <HAL_GPIO_Init+0x31c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d019      	beq.n	8000c92 <HAL_GPIO_Init+0x21a>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a4d      	ldr	r2, [pc, #308]	; (8000d98 <HAL_GPIO_Init+0x320>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d013      	beq.n	8000c8e <HAL_GPIO_Init+0x216>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a4c      	ldr	r2, [pc, #304]	; (8000d9c <HAL_GPIO_Init+0x324>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d00d      	beq.n	8000c8a <HAL_GPIO_Init+0x212>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a4b      	ldr	r2, [pc, #300]	; (8000da0 <HAL_GPIO_Init+0x328>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d007      	beq.n	8000c86 <HAL_GPIO_Init+0x20e>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a4a      	ldr	r2, [pc, #296]	; (8000da4 <HAL_GPIO_Init+0x32c>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d101      	bne.n	8000c82 <HAL_GPIO_Init+0x20a>
 8000c7e:	2307      	movs	r3, #7
 8000c80:	e00e      	b.n	8000ca0 <HAL_GPIO_Init+0x228>
 8000c82:	2308      	movs	r3, #8
 8000c84:	e00c      	b.n	8000ca0 <HAL_GPIO_Init+0x228>
 8000c86:	2306      	movs	r3, #6
 8000c88:	e00a      	b.n	8000ca0 <HAL_GPIO_Init+0x228>
 8000c8a:	2305      	movs	r3, #5
 8000c8c:	e008      	b.n	8000ca0 <HAL_GPIO_Init+0x228>
 8000c8e:	2304      	movs	r3, #4
 8000c90:	e006      	b.n	8000ca0 <HAL_GPIO_Init+0x228>
 8000c92:	2303      	movs	r3, #3
 8000c94:	e004      	b.n	8000ca0 <HAL_GPIO_Init+0x228>
 8000c96:	2302      	movs	r3, #2
 8000c98:	e002      	b.n	8000ca0 <HAL_GPIO_Init+0x228>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <HAL_GPIO_Init+0x228>
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	69fa      	ldr	r2, [r7, #28]
 8000ca2:	f002 0203 	and.w	r2, r2, #3
 8000ca6:	0092      	lsls	r2, r2, #2
 8000ca8:	4093      	lsls	r3, r2
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cb0:	4934      	ldr	r1, [pc, #208]	; (8000d84 <HAL_GPIO_Init+0x30c>)
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	089b      	lsrs	r3, r3, #2
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cbe:	4b3a      	ldr	r3, [pc, #232]	; (8000da8 <HAL_GPIO_Init+0x330>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ce2:	4a31      	ldr	r2, [pc, #196]	; (8000da8 <HAL_GPIO_Init+0x330>)
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <HAL_GPIO_Init+0x330>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d0c:	4a26      	ldr	r2, [pc, #152]	; (8000da8 <HAL_GPIO_Init+0x330>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d12:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <HAL_GPIO_Init+0x330>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d36:	4a1c      	ldr	r2, [pc, #112]	; (8000da8 <HAL_GPIO_Init+0x330>)
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <HAL_GPIO_Init+0x330>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d60:	4a11      	ldr	r2, [pc, #68]	; (8000da8 <HAL_GPIO_Init+0x330>)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	61fb      	str	r3, [r7, #28]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	2b0f      	cmp	r3, #15
 8000d70:	f67f ae90 	bls.w	8000a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d74:	bf00      	nop
 8000d76:	3724      	adds	r7, #36	; 0x24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40013800 	.word	0x40013800
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	40020400 	.word	0x40020400
 8000d90:	40020800 	.word	0x40020800
 8000d94:	40020c00 	.word	0x40020c00
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40021400 	.word	0x40021400
 8000da0:	40021800 	.word	0x40021800
 8000da4:	40021c00 	.word	0x40021c00
 8000da8:	40013c00 	.word	0x40013c00

08000dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	807b      	strh	r3, [r7, #2]
 8000db8:	4613      	mov	r3, r2
 8000dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dbc:	787b      	ldrb	r3, [r7, #1]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dc2:	887a      	ldrh	r2, [r7, #2]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000dc8:	e003      	b.n	8000dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	041a      	lsls	r2, r3, #16
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	619a      	str	r2, [r3, #24]
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e25b      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d075      	beq.n	8000eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dfe:	4ba3      	ldr	r3, [pc, #652]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f003 030c 	and.w	r3, r3, #12
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	d00c      	beq.n	8000e24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e0a:	4ba0      	ldr	r3, [pc, #640]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e12:	2b08      	cmp	r3, #8
 8000e14:	d112      	bne.n	8000e3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e16:	4b9d      	ldr	r3, [pc, #628]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e22:	d10b      	bne.n	8000e3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e24:	4b99      	ldr	r3, [pc, #612]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d05b      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x108>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d157      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e236      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e44:	d106      	bne.n	8000e54 <HAL_RCC_OscConfig+0x74>
 8000e46:	4b91      	ldr	r3, [pc, #580]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a90      	ldr	r2, [pc, #576]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e01d      	b.n	8000e90 <HAL_RCC_OscConfig+0xb0>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e5c:	d10c      	bne.n	8000e78 <HAL_RCC_OscConfig+0x98>
 8000e5e:	4b8b      	ldr	r3, [pc, #556]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a8a      	ldr	r2, [pc, #552]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	4b88      	ldr	r3, [pc, #544]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a87      	ldr	r2, [pc, #540]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e00b      	b.n	8000e90 <HAL_RCC_OscConfig+0xb0>
 8000e78:	4b84      	ldr	r3, [pc, #528]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a83      	ldr	r2, [pc, #524]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b81      	ldr	r3, [pc, #516]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a80      	ldr	r2, [pc, #512]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d013      	beq.n	8000ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e98:	f7ff fd00 	bl	800089c <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fcfc 	bl	800089c <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b64      	cmp	r3, #100	; 0x64
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e1fb      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb2:	4b76      	ldr	r3, [pc, #472]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f0      	beq.n	8000ea0 <HAL_RCC_OscConfig+0xc0>
 8000ebe:	e014      	b.n	8000eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fcec 	bl	800089c <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fce8 	bl	800089c <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e1e7      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eda:	4b6c      	ldr	r3, [pc, #432]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0xe8>
 8000ee6:	e000      	b.n	8000eea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d063      	beq.n	8000fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ef6:	4b65      	ldr	r3, [pc, #404]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00b      	beq.n	8000f1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f02:	4b62      	ldr	r3, [pc, #392]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d11c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f0e:	4b5f      	ldr	r3, [pc, #380]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d116      	bne.n	8000f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1a:	4b5c      	ldr	r3, [pc, #368]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d005      	beq.n	8000f32 <HAL_RCC_OscConfig+0x152>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d001      	beq.n	8000f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e1bb      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f32:	4b56      	ldr	r3, [pc, #344]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4952      	ldr	r1, [pc, #328]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f46:	e03a      	b.n	8000fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d020      	beq.n	8000f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f50:	4b4f      	ldr	r3, [pc, #316]	; (8001090 <HAL_RCC_OscConfig+0x2b0>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f56:	f7ff fca1 	bl	800089c <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f5e:	f7ff fc9d 	bl	800089c <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e19c      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f70:	4b46      	ldr	r3, [pc, #280]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f0      	beq.n	8000f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7c:	4b43      	ldr	r3, [pc, #268]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4940      	ldr	r1, [pc, #256]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	600b      	str	r3, [r1, #0]
 8000f90:	e015      	b.n	8000fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f92:	4b3f      	ldr	r3, [pc, #252]	; (8001090 <HAL_RCC_OscConfig+0x2b0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f98:	f7ff fc80 	bl	800089c <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fc7c 	bl	800089c <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e17b      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb2:	4b36      	ldr	r3, [pc, #216]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f0      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d030      	beq.n	800102c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d016      	beq.n	8001000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fd2:	4b30      	ldr	r3, [pc, #192]	; (8001094 <HAL_RCC_OscConfig+0x2b4>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fd8:	f7ff fc60 	bl	800089c <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fe0:	f7ff fc5c 	bl	800089c <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e15b      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8000ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f0      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x200>
 8000ffe:	e015      	b.n	800102c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <HAL_RCC_OscConfig+0x2b4>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001006:	f7ff fc49 	bl	800089c <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800100e:	f7ff fc45 	bl	800089c <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e144      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8001022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f0      	bne.n	800100e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 80a0 	beq.w	800117a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10f      	bne.n	800106a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_RCC_OscConfig+0x2ac>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001066:	2301      	movs	r3, #1
 8001068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_RCC_OscConfig+0x2b8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001072:	2b00      	cmp	r3, #0
 8001074:	d121      	bne.n	80010ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_RCC_OscConfig+0x2b8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_RCC_OscConfig+0x2b8>)
 800107c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001082:	f7ff fc0b 	bl	800089c <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001088:	e011      	b.n	80010ae <HAL_RCC_OscConfig+0x2ce>
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	42470000 	.word	0x42470000
 8001094:	42470e80 	.word	0x42470e80
 8001098:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800109c:	f7ff fbfe 	bl	800089c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e0fd      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ae:	4b81      	ldr	r3, [pc, #516]	; (80012b4 <HAL_RCC_OscConfig+0x4d4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d106      	bne.n	80010d0 <HAL_RCC_OscConfig+0x2f0>
 80010c2:	4b7d      	ldr	r3, [pc, #500]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 80010c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010c6:	4a7c      	ldr	r2, [pc, #496]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6713      	str	r3, [r2, #112]	; 0x70
 80010ce:	e01c      	b.n	800110a <HAL_RCC_OscConfig+0x32a>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	2b05      	cmp	r3, #5
 80010d6:	d10c      	bne.n	80010f2 <HAL_RCC_OscConfig+0x312>
 80010d8:	4b77      	ldr	r3, [pc, #476]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 80010da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010dc:	4a76      	ldr	r2, [pc, #472]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6713      	str	r3, [r2, #112]	; 0x70
 80010e4:	4b74      	ldr	r3, [pc, #464]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 80010e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010e8:	4a73      	ldr	r2, [pc, #460]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6713      	str	r3, [r2, #112]	; 0x70
 80010f0:	e00b      	b.n	800110a <HAL_RCC_OscConfig+0x32a>
 80010f2:	4b71      	ldr	r3, [pc, #452]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 80010f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010f6:	4a70      	ldr	r2, [pc, #448]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	6713      	str	r3, [r2, #112]	; 0x70
 80010fe:	4b6e      	ldr	r3, [pc, #440]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 8001100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001102:	4a6d      	ldr	r2, [pc, #436]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 8001104:	f023 0304 	bic.w	r3, r3, #4
 8001108:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d015      	beq.n	800113e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001112:	f7ff fbc3 	bl	800089c <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001118:	e00a      	b.n	8001130 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800111a:	f7ff fbbf 	bl	800089c <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	f241 3288 	movw	r2, #5000	; 0x1388
 8001128:	4293      	cmp	r3, r2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e0bc      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001130:	4b61      	ldr	r3, [pc, #388]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 8001132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0ee      	beq.n	800111a <HAL_RCC_OscConfig+0x33a>
 800113c:	e014      	b.n	8001168 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113e:	f7ff fbad 	bl	800089c <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001144:	e00a      	b.n	800115c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001146:	f7ff fba9 	bl	800089c <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	f241 3288 	movw	r2, #5000	; 0x1388
 8001154:	4293      	cmp	r3, r2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e0a6      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800115c:	4b56      	ldr	r3, [pc, #344]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 800115e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1ee      	bne.n	8001146 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d105      	bne.n	800117a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800116e:	4b52      	ldr	r3, [pc, #328]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a51      	ldr	r2, [pc, #324]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 8001174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 8092 	beq.w	80012a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001184:	4b4c      	ldr	r3, [pc, #304]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 030c 	and.w	r3, r3, #12
 800118c:	2b08      	cmp	r3, #8
 800118e:	d05c      	beq.n	800124a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d141      	bne.n	800121c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001198:	4b48      	ldr	r3, [pc, #288]	; (80012bc <HAL_RCC_OscConfig+0x4dc>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119e:	f7ff fb7d 	bl	800089c <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a6:	f7ff fb79 	bl	800089c <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e078      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011b8:	4b3f      	ldr	r3, [pc, #252]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f0      	bne.n	80011a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69da      	ldr	r2, [r3, #28]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	431a      	orrs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	019b      	lsls	r3, r3, #6
 80011d4:	431a      	orrs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011da:	085b      	lsrs	r3, r3, #1
 80011dc:	3b01      	subs	r3, #1
 80011de:	041b      	lsls	r3, r3, #16
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e6:	061b      	lsls	r3, r3, #24
 80011e8:	4933      	ldr	r1, [pc, #204]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011ee:	4b33      	ldr	r3, [pc, #204]	; (80012bc <HAL_RCC_OscConfig+0x4dc>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fb52 	bl	800089c <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011fc:	f7ff fb4e 	bl	800089c <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e04d      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0f0      	beq.n	80011fc <HAL_RCC_OscConfig+0x41c>
 800121a:	e045      	b.n	80012a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <HAL_RCC_OscConfig+0x4dc>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff fb3b 	bl	800089c <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800122a:	f7ff fb37 	bl	800089c <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e036      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f0      	bne.n	800122a <HAL_RCC_OscConfig+0x44a>
 8001248:	e02e      	b.n	80012a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e029      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_RCC_OscConfig+0x4d8>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	429a      	cmp	r2, r3
 8001268:	d11c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001274:	429a      	cmp	r2, r3
 8001276:	d115      	bne.n	80012a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800127e:	4013      	ands	r3, r2
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001284:	4293      	cmp	r3, r2
 8001286:	d10d      	bne.n	80012a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001292:	429a      	cmp	r2, r3
 8001294:	d106      	bne.n	80012a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d001      	beq.n	80012a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40007000 	.word	0x40007000
 80012b8:	40023800 	.word	0x40023800
 80012bc:	42470060 	.word	0x42470060

080012c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e0cc      	b.n	800146e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012d4:	4b68      	ldr	r3, [pc, #416]	; (8001478 <HAL_RCC_ClockConfig+0x1b8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d90c      	bls.n	80012fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e2:	4b65      	ldr	r3, [pc, #404]	; (8001478 <HAL_RCC_ClockConfig+0x1b8>)
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ea:	4b63      	ldr	r3, [pc, #396]	; (8001478 <HAL_RCC_ClockConfig+0x1b8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d001      	beq.n	80012fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e0b8      	b.n	800146e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d020      	beq.n	800134a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001314:	4b59      	ldr	r3, [pc, #356]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	4a58      	ldr	r2, [pc, #352]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 800131a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800131e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	2b00      	cmp	r3, #0
 800132a:	d005      	beq.n	8001338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800132c:	4b53      	ldr	r3, [pc, #332]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	4a52      	ldr	r2, [pc, #328]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 8001332:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001338:	4b50      	ldr	r3, [pc, #320]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	494d      	ldr	r1, [pc, #308]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 8001346:	4313      	orrs	r3, r2
 8001348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d044      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d107      	bne.n	800136e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	4b47      	ldr	r3, [pc, #284]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d119      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e07f      	b.n	800146e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d003      	beq.n	800137e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800137a:	2b03      	cmp	r3, #3
 800137c:	d107      	bne.n	800138e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137e:	4b3f      	ldr	r3, [pc, #252]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e06f      	b.n	800146e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138e:	4b3b      	ldr	r3, [pc, #236]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e067      	b.n	800146e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800139e:	4b37      	ldr	r3, [pc, #220]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f023 0203 	bic.w	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	4934      	ldr	r1, [pc, #208]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013b0:	f7ff fa74 	bl	800089c <HAL_GetTick>
 80013b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b6:	e00a      	b.n	80013ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b8:	f7ff fa70 	bl	800089c <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e04f      	b.n	800146e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ce:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 020c 	and.w	r2, r3, #12
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	429a      	cmp	r2, r3
 80013de:	d1eb      	bne.n	80013b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013e0:	4b25      	ldr	r3, [pc, #148]	; (8001478 <HAL_RCC_ClockConfig+0x1b8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d20c      	bcs.n	8001408 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	4b22      	ldr	r3, [pc, #136]	; (8001478 <HAL_RCC_ClockConfig+0x1b8>)
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_RCC_ClockConfig+0x1b8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d001      	beq.n	8001408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e032      	b.n	800146e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	d008      	beq.n	8001426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	4916      	ldr	r1, [pc, #88]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	4313      	orrs	r3, r2
 8001424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d009      	beq.n	8001446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	490e      	ldr	r1, [pc, #56]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	4313      	orrs	r3, r2
 8001444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001446:	f000 f821 	bl	800148c <HAL_RCC_GetSysClockFreq>
 800144a:	4601      	mov	r1, r0
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 8001458:	5cd3      	ldrb	r3, [r2, r3]
 800145a:	fa21 f303 	lsr.w	r3, r1, r3
 800145e:	4a09      	ldr	r2, [pc, #36]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_RCC_ClockConfig+0x1c8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f92a 	bl	80006c0 <HAL_InitTick>

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023c00 	.word	0x40023c00
 800147c:	40023800 	.word	0x40023800
 8001480:	08001f58 	.word	0x08001f58
 8001484:	20000000 	.word	0x20000000
 8001488:	20000004 	.word	0x20000004

0800148c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014a2:	4b50      	ldr	r3, [pc, #320]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d007      	beq.n	80014be <HAL_RCC_GetSysClockFreq+0x32>
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d008      	beq.n	80014c4 <HAL_RCC_GetSysClockFreq+0x38>
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f040 808d 	bne.w	80015d2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014b8:	4b4b      	ldr	r3, [pc, #300]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80014ba:	60bb      	str	r3, [r7, #8]
       break;
 80014bc:	e08c      	b.n	80015d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014be:	4b4b      	ldr	r3, [pc, #300]	; (80015ec <HAL_RCC_GetSysClockFreq+0x160>)
 80014c0:	60bb      	str	r3, [r7, #8]
      break;
 80014c2:	e089      	b.n	80015d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014c4:	4b47      	ldr	r3, [pc, #284]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014ce:	4b45      	ldr	r3, [pc, #276]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d023      	beq.n	8001522 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014da:	4b42      	ldr	r3, [pc, #264]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	099b      	lsrs	r3, r3, #6
 80014e0:	f04f 0400 	mov.w	r4, #0
 80014e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	ea03 0501 	and.w	r5, r3, r1
 80014f0:	ea04 0602 	and.w	r6, r4, r2
 80014f4:	4a3d      	ldr	r2, [pc, #244]	; (80015ec <HAL_RCC_GetSysClockFreq+0x160>)
 80014f6:	fb02 f106 	mul.w	r1, r2, r6
 80014fa:	2200      	movs	r2, #0
 80014fc:	fb02 f205 	mul.w	r2, r2, r5
 8001500:	440a      	add	r2, r1
 8001502:	493a      	ldr	r1, [pc, #232]	; (80015ec <HAL_RCC_GetSysClockFreq+0x160>)
 8001504:	fba5 0101 	umull	r0, r1, r5, r1
 8001508:	1853      	adds	r3, r2, r1
 800150a:	4619      	mov	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f04f 0400 	mov.w	r4, #0
 8001512:	461a      	mov	r2, r3
 8001514:	4623      	mov	r3, r4
 8001516:	f7fe fe5b 	bl	80001d0 <__aeabi_uldivmod>
 800151a:	4603      	mov	r3, r0
 800151c:	460c      	mov	r4, r1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	e049      	b.n	80015b6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001522:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	099b      	lsrs	r3, r3, #6
 8001528:	f04f 0400 	mov.w	r4, #0
 800152c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	ea03 0501 	and.w	r5, r3, r1
 8001538:	ea04 0602 	and.w	r6, r4, r2
 800153c:	4629      	mov	r1, r5
 800153e:	4632      	mov	r2, r6
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	f04f 0400 	mov.w	r4, #0
 8001548:	0154      	lsls	r4, r2, #5
 800154a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800154e:	014b      	lsls	r3, r1, #5
 8001550:	4619      	mov	r1, r3
 8001552:	4622      	mov	r2, r4
 8001554:	1b49      	subs	r1, r1, r5
 8001556:	eb62 0206 	sbc.w	r2, r2, r6
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	f04f 0400 	mov.w	r4, #0
 8001562:	0194      	lsls	r4, r2, #6
 8001564:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001568:	018b      	lsls	r3, r1, #6
 800156a:	1a5b      	subs	r3, r3, r1
 800156c:	eb64 0402 	sbc.w	r4, r4, r2
 8001570:	f04f 0100 	mov.w	r1, #0
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	00e2      	lsls	r2, r4, #3
 800157a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800157e:	00d9      	lsls	r1, r3, #3
 8001580:	460b      	mov	r3, r1
 8001582:	4614      	mov	r4, r2
 8001584:	195b      	adds	r3, r3, r5
 8001586:	eb44 0406 	adc.w	r4, r4, r6
 800158a:	f04f 0100 	mov.w	r1, #0
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	02a2      	lsls	r2, r4, #10
 8001594:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001598:	0299      	lsls	r1, r3, #10
 800159a:	460b      	mov	r3, r1
 800159c:	4614      	mov	r4, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	4621      	mov	r1, r4
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f04f 0400 	mov.w	r4, #0
 80015a8:	461a      	mov	r2, r3
 80015aa:	4623      	mov	r3, r4
 80015ac:	f7fe fe10 	bl	80001d0 <__aeabi_uldivmod>
 80015b0:	4603      	mov	r3, r0
 80015b2:	460c      	mov	r4, r1
 80015b4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	0c1b      	lsrs	r3, r3, #16
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	3301      	adds	r3, #1
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	60bb      	str	r3, [r7, #8]
      break;
 80015d0:	e002      	b.n	80015d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80015d4:	60bb      	str	r3, [r7, #8]
      break;
 80015d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015d8:	68bb      	ldr	r3, [r7, #8]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	00f42400 	.word	0x00f42400
 80015ec:	017d7840 	.word	0x017d7840

080015f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_RCC_GetHCLKFreq+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000000 	.word	0x20000000

08001608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800160c:	f7ff fff0 	bl	80015f0 <HAL_RCC_GetHCLKFreq>
 8001610:	4601      	mov	r1, r0
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	0a9b      	lsrs	r3, r3, #10
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	4a03      	ldr	r2, [pc, #12]	; (800162c <HAL_RCC_GetPCLK1Freq+0x24>)
 800161e:	5cd3      	ldrb	r3, [r2, r3]
 8001620:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001624:	4618      	mov	r0, r3
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	08001f68 	.word	0x08001f68

08001630 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	220f      	movs	r2, #15
 800163e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_RCC_GetClockConfig+0x5c>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 0203 	and.w	r2, r3, #3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_RCC_GetClockConfig+0x5c>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_RCC_GetClockConfig+0x5c>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_RCC_GetClockConfig+0x5c>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	08db      	lsrs	r3, r3, #3
 800166a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <HAL_RCC_GetClockConfig+0x60>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 020f 	and.w	r2, r3, #15
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	601a      	str	r2, [r3, #0]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	40023c00 	.word	0x40023c00

08001694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e01d      	b.n	80016e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d106      	bne.n	80016c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f815 	bl	80016ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2202      	movs	r2, #2
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3304      	adds	r3, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4610      	mov	r0, r2
 80016d4:	f000 f968 	bl	80019a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016fe:	b480      	push	{r7}
 8001700:	b085      	sub	sp, #20
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2b06      	cmp	r3, #6
 8001726:	d007      	beq.n	8001738 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b02      	cmp	r3, #2
 800175a:	d122      	bne.n	80017a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b02      	cmp	r3, #2
 8001768:	d11b      	bne.n	80017a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f06f 0202 	mvn.w	r2, #2
 8001772:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f8ee 	bl	800196a <HAL_TIM_IC_CaptureCallback>
 800178e:	e005      	b.n	800179c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f8e0 	bl	8001956 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f8f1 	bl	800197e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d122      	bne.n	80017f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d11b      	bne.n	80017f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f06f 0204 	mvn.w	r2, #4
 80017c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2202      	movs	r2, #2
 80017cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f8c4 	bl	800196a <HAL_TIM_IC_CaptureCallback>
 80017e2:	e005      	b.n	80017f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f8b6 	bl	8001956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f8c7 	bl	800197e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b08      	cmp	r3, #8
 8001802:	d122      	bne.n	800184a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b08      	cmp	r3, #8
 8001810:	d11b      	bne.n	800184a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f06f 0208 	mvn.w	r2, #8
 800181a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2204      	movs	r2, #4
 8001820:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f89a 	bl	800196a <HAL_TIM_IC_CaptureCallback>
 8001836:	e005      	b.n	8001844 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f88c 	bl	8001956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f89d 	bl	800197e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	2b10      	cmp	r3, #16
 8001856:	d122      	bne.n	800189e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	2b10      	cmp	r3, #16
 8001864:	d11b      	bne.n	800189e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f06f 0210 	mvn.w	r2, #16
 800186e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2208      	movs	r2, #8
 8001874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f870 	bl	800196a <HAL_TIM_IC_CaptureCallback>
 800188a:	e005      	b.n	8001898 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f862 	bl	8001956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f873 	bl	800197e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d10e      	bne.n	80018ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d107      	bne.n	80018ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f06f 0201 	mvn.w	r2, #1
 80018c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7fe febd 	bl	8000644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d4:	2b80      	cmp	r3, #128	; 0x80
 80018d6:	d10e      	bne.n	80018f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	2b80      	cmp	r3, #128	; 0x80
 80018e4:	d107      	bne.n	80018f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f903 	bl	8001afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001900:	2b40      	cmp	r3, #64	; 0x40
 8001902:	d10e      	bne.n	8001922 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190e:	2b40      	cmp	r3, #64	; 0x40
 8001910:	d107      	bne.n	8001922 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800191a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f838 	bl	8001992 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b20      	cmp	r3, #32
 800192e:	d10e      	bne.n	800194e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	2b20      	cmp	r3, #32
 800193c:	d107      	bne.n	800194e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f06f 0220 	mvn.w	r2, #32
 8001946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f8cd 	bl	8001ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a40      	ldr	r2, [pc, #256]	; (8001abc <TIM_Base_SetConfig+0x114>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d013      	beq.n	80019e8 <TIM_Base_SetConfig+0x40>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c6:	d00f      	beq.n	80019e8 <TIM_Base_SetConfig+0x40>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a3d      	ldr	r2, [pc, #244]	; (8001ac0 <TIM_Base_SetConfig+0x118>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d00b      	beq.n	80019e8 <TIM_Base_SetConfig+0x40>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a3c      	ldr	r2, [pc, #240]	; (8001ac4 <TIM_Base_SetConfig+0x11c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d007      	beq.n	80019e8 <TIM_Base_SetConfig+0x40>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a3b      	ldr	r2, [pc, #236]	; (8001ac8 <TIM_Base_SetConfig+0x120>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d003      	beq.n	80019e8 <TIM_Base_SetConfig+0x40>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a3a      	ldr	r2, [pc, #232]	; (8001acc <TIM_Base_SetConfig+0x124>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d108      	bne.n	80019fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a2f      	ldr	r2, [pc, #188]	; (8001abc <TIM_Base_SetConfig+0x114>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d02b      	beq.n	8001a5a <TIM_Base_SetConfig+0xb2>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a08:	d027      	beq.n	8001a5a <TIM_Base_SetConfig+0xb2>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a2c      	ldr	r2, [pc, #176]	; (8001ac0 <TIM_Base_SetConfig+0x118>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d023      	beq.n	8001a5a <TIM_Base_SetConfig+0xb2>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a2b      	ldr	r2, [pc, #172]	; (8001ac4 <TIM_Base_SetConfig+0x11c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d01f      	beq.n	8001a5a <TIM_Base_SetConfig+0xb2>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a2a      	ldr	r2, [pc, #168]	; (8001ac8 <TIM_Base_SetConfig+0x120>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d01b      	beq.n	8001a5a <TIM_Base_SetConfig+0xb2>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a29      	ldr	r2, [pc, #164]	; (8001acc <TIM_Base_SetConfig+0x124>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d017      	beq.n	8001a5a <TIM_Base_SetConfig+0xb2>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a28      	ldr	r2, [pc, #160]	; (8001ad0 <TIM_Base_SetConfig+0x128>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d013      	beq.n	8001a5a <TIM_Base_SetConfig+0xb2>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a27      	ldr	r2, [pc, #156]	; (8001ad4 <TIM_Base_SetConfig+0x12c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00f      	beq.n	8001a5a <TIM_Base_SetConfig+0xb2>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <TIM_Base_SetConfig+0x130>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d00b      	beq.n	8001a5a <TIM_Base_SetConfig+0xb2>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a25      	ldr	r2, [pc, #148]	; (8001adc <TIM_Base_SetConfig+0x134>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d007      	beq.n	8001a5a <TIM_Base_SetConfig+0xb2>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a24      	ldr	r2, [pc, #144]	; (8001ae0 <TIM_Base_SetConfig+0x138>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d003      	beq.n	8001a5a <TIM_Base_SetConfig+0xb2>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <TIM_Base_SetConfig+0x13c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d108      	bne.n	8001a6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <TIM_Base_SetConfig+0x114>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d003      	beq.n	8001aa0 <TIM_Base_SetConfig+0xf8>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a0c      	ldr	r2, [pc, #48]	; (8001acc <TIM_Base_SetConfig+0x124>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d103      	bne.n	8001aa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	615a      	str	r2, [r3, #20]
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	40000400 	.word	0x40000400
 8001ac4:	40000800 	.word	0x40000800
 8001ac8:	40000c00 	.word	0x40000c00
 8001acc:	40010400 	.word	0x40010400
 8001ad0:	40014000 	.word	0x40014000
 8001ad4:	40014400 	.word	0x40014400
 8001ad8:	40014800 	.word	0x40014800
 8001adc:	40001800 	.word	0x40001800
 8001ae0:	40001c00 	.word	0x40001c00
 8001ae4:	40002000 	.word	0x40002000

08001ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	601a      	str	r2, [r3, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6892      	ldr	r2, [r2, #8]
 8001b6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6852      	ldr	r2, [r2, #4]
 8001b78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d103      	bne.n	8001b8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	1e5a      	subs	r2, r3, #1
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bb6:	4b4e      	ldr	r3, [pc, #312]	; (8001cf0 <xTaskIncrementTick+0x144>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 8087 	bne.w	8001cce <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001bc0:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <xTaskIncrementTick+0x148>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001bc8:	4a4a      	ldr	r2, [pc, #296]	; (8001cf4 <xTaskIncrementTick+0x148>)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d11f      	bne.n	8001c14 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001bd4:	4b48      	ldr	r3, [pc, #288]	; (8001cf8 <xTaskIncrementTick+0x14c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be2:	f383 8811 	msr	BASEPRI, r3
 8001be6:	f3bf 8f6f 	isb	sy
 8001bea:	f3bf 8f4f 	dsb	sy
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	e7fe      	b.n	8001bf0 <xTaskIncrementTick+0x44>
 8001bf2:	4b41      	ldr	r3, [pc, #260]	; (8001cf8 <xTaskIncrementTick+0x14c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <xTaskIncrementTick+0x150>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a3e      	ldr	r2, [pc, #248]	; (8001cf8 <xTaskIncrementTick+0x14c>)
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4a3e      	ldr	r2, [pc, #248]	; (8001cfc <xTaskIncrementTick+0x150>)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <xTaskIncrementTick+0x154>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	4a3c      	ldr	r2, [pc, #240]	; (8001d00 <xTaskIncrementTick+0x154>)
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	f000 f8de 	bl	8001dd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001c14:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <xTaskIncrementTick+0x158>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d348      	bcc.n	8001cb0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c1e:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <xTaskIncrementTick+0x14c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d104      	bne.n	8001c32 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c28:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <xTaskIncrementTick+0x158>)
 8001c2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c2e:	601a      	str	r2, [r3, #0]
					break;
 8001c30:	e03e      	b.n	8001cb0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c32:	4b31      	ldr	r3, [pc, #196]	; (8001cf8 <xTaskIncrementTick+0x14c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d203      	bcs.n	8001c52 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001c4a:	4a2e      	ldr	r2, [pc, #184]	; (8001d04 <xTaskIncrementTick+0x158>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001c50:	e02e      	b.n	8001cb0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	3304      	adds	r3, #4
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ff7e 	bl	8001b58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d004      	beq.n	8001c6e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	3318      	adds	r3, #24
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff75 	bl	8001b58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	2201      	movs	r2, #1
 8001c74:	409a      	lsls	r2, r3
 8001c76:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <xTaskIncrementTick+0x15c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	4a22      	ldr	r2, [pc, #136]	; (8001d08 <xTaskIncrementTick+0x15c>)
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <xTaskIncrementTick+0x160>)
 8001c8e:	441a      	add	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	3304      	adds	r3, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	4610      	mov	r0, r2
 8001c98:	f7ff ff3a 	bl	8001b10 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <xTaskIncrementTick+0x164>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d3b9      	bcc.n	8001c1e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001caa:	2301      	movs	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cae:	e7b6      	b.n	8001c1e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <xTaskIncrementTick+0x164>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb6:	4915      	ldr	r1, [pc, #84]	; (8001d0c <xTaskIncrementTick+0x160>)
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d907      	bls.n	8001cd8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	e004      	b.n	8001cd8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <xTaskIncrementTick+0x168>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	4a0f      	ldr	r2, [pc, #60]	; (8001d14 <xTaskIncrementTick+0x168>)
 8001cd6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <xTaskIncrementTick+0x16c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001ce4:	697b      	ldr	r3, [r7, #20]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200000b0 	.word	0x200000b0
 8001cf4:	20000098 	.word	0x20000098
 8001cf8:	20000090 	.word	0x20000090
 8001cfc:	20000094 	.word	0x20000094
 8001d00:	200000a8 	.word	0x200000a8
 8001d04:	200000ac 	.word	0x200000ac
 8001d08:	2000009c 	.word	0x2000009c
 8001d0c:	2000002c 	.word	0x2000002c
 8001d10:	20000028 	.word	0x20000028
 8001d14:	200000a0 	.word	0x200000a0
 8001d18:	200000a4 	.word	0x200000a4

08001d1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <vTaskSwitchContext+0xa0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001d2a:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <vTaskSwitchContext+0xa4>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001d30:	e03e      	b.n	8001db0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8001d32:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <vTaskSwitchContext+0xa4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d38:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <vTaskSwitchContext+0xa8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001d46:	7afb      	ldrb	r3, [r7, #11]
 8001d48:	f1c3 031f 	rsb	r3, r3, #31
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	491e      	ldr	r1, [pc, #120]	; (8001dc8 <vTaskSwitchContext+0xac>)
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d109      	bne.n	8001d76 <vTaskSwitchContext+0x5a>
	__asm volatile
 8001d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d66:	f383 8811 	msr	BASEPRI, r3
 8001d6a:	f3bf 8f6f 	isb	sy
 8001d6e:	f3bf 8f4f 	dsb	sy
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	e7fe      	b.n	8001d74 <vTaskSwitchContext+0x58>
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <vTaskSwitchContext+0xac>)
 8001d82:	4413      	add	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	3308      	adds	r3, #8
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d104      	bne.n	8001da6 <vTaskSwitchContext+0x8a>
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	4a07      	ldr	r2, [pc, #28]	; (8001dcc <vTaskSwitchContext+0xb0>)
 8001dae:	6013      	str	r3, [r2, #0]
}
 8001db0:	bf00      	nop
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	200000b0 	.word	0x200000b0
 8001dc0:	200000a4 	.word	0x200000a4
 8001dc4:	2000009c 	.word	0x2000009c
 8001dc8:	2000002c 	.word	0x2000002c
 8001dcc:	20000028 	.word	0x20000028

08001dd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <prvResetNextTaskUnblockTime+0x38>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d104      	bne.n	8001dea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <prvResetNextTaskUnblockTime+0x3c>)
 8001de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001de6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001de8:	e008      	b.n	8001dfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <prvResetNextTaskUnblockTime+0x38>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <prvResetNextTaskUnblockTime+0x3c>)
 8001dfa:	6013      	str	r3, [r2, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	20000090 	.word	0x20000090
 8001e0c:	200000ac 	.word	0x200000ac

08001e10 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <pxCurrentTCBConst2>)
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	6808      	ldr	r0, [r1, #0]
 8001e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e1a:	f380 8809 	msr	PSP, r0
 8001e1e:	f3bf 8f6f 	isb	sy
 8001e22:	f04f 0000 	mov.w	r0, #0
 8001e26:	f380 8811 	msr	BASEPRI, r0
 8001e2a:	4770      	bx	lr
 8001e2c:	f3af 8000 	nop.w

08001e30 <pxCurrentTCBConst2>:
 8001e30:	20000028 	.word	0x20000028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
	...

08001e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001e40:	f3ef 8009 	mrs	r0, PSP
 8001e44:	f3bf 8f6f 	isb	sy
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <pxCurrentTCBConst>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	f01e 0f10 	tst.w	lr, #16
 8001e50:	bf08      	it	eq
 8001e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e5a:	6010      	str	r0, [r2, #0]
 8001e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001e64:	f380 8811 	msr	BASEPRI, r0
 8001e68:	f3bf 8f4f 	dsb	sy
 8001e6c:	f3bf 8f6f 	isb	sy
 8001e70:	f7ff ff54 	bl	8001d1c <vTaskSwitchContext>
 8001e74:	f04f 0000 	mov.w	r0, #0
 8001e78:	f380 8811 	msr	BASEPRI, r0
 8001e7c:	bc09      	pop	{r0, r3}
 8001e7e:	6819      	ldr	r1, [r3, #0]
 8001e80:	6808      	ldr	r0, [r1, #0]
 8001e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e86:	f01e 0f10 	tst.w	lr, #16
 8001e8a:	bf08      	it	eq
 8001e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001e90:	f380 8809 	msr	PSP, r0
 8001e94:	f3bf 8f6f 	isb	sy
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	f3af 8000 	nop.w

08001ea0 <pxCurrentTCBConst>:
 8001ea0:	20000028 	.word	0x20000028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop

08001ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb2:	f383 8811 	msr	BASEPRI, r3
 8001eb6:	f3bf 8f6f 	isb	sy
 8001eba:	f3bf 8f4f 	dsb	sy
 8001ebe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001ec0:	f7ff fe74 	bl	8001bac <xTaskIncrementTick>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <SysTick_Handler+0x3c>)
 8001ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	e000ed04 	.word	0xe000ed04

08001ee8 <__libc_init_array>:
 8001ee8:	b570      	push	{r4, r5, r6, lr}
 8001eea:	4e0d      	ldr	r6, [pc, #52]	; (8001f20 <__libc_init_array+0x38>)
 8001eec:	4c0d      	ldr	r4, [pc, #52]	; (8001f24 <__libc_init_array+0x3c>)
 8001eee:	1ba4      	subs	r4, r4, r6
 8001ef0:	10a4      	asrs	r4, r4, #2
 8001ef2:	2500      	movs	r5, #0
 8001ef4:	42a5      	cmp	r5, r4
 8001ef6:	d109      	bne.n	8001f0c <__libc_init_array+0x24>
 8001ef8:	4e0b      	ldr	r6, [pc, #44]	; (8001f28 <__libc_init_array+0x40>)
 8001efa:	4c0c      	ldr	r4, [pc, #48]	; (8001f2c <__libc_init_array+0x44>)
 8001efc:	f000 f820 	bl	8001f40 <_init>
 8001f00:	1ba4      	subs	r4, r4, r6
 8001f02:	10a4      	asrs	r4, r4, #2
 8001f04:	2500      	movs	r5, #0
 8001f06:	42a5      	cmp	r5, r4
 8001f08:	d105      	bne.n	8001f16 <__libc_init_array+0x2e>
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}
 8001f0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f10:	4798      	blx	r3
 8001f12:	3501      	adds	r5, #1
 8001f14:	e7ee      	b.n	8001ef4 <__libc_init_array+0xc>
 8001f16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f1a:	4798      	blx	r3
 8001f1c:	3501      	adds	r5, #1
 8001f1e:	e7f2      	b.n	8001f06 <__libc_init_array+0x1e>
 8001f20:	08001f78 	.word	0x08001f78
 8001f24:	08001f78 	.word	0x08001f78
 8001f28:	08001f78 	.word	0x08001f78
 8001f2c:	08001f7c 	.word	0x08001f7c

08001f30 <memset>:
 8001f30:	4402      	add	r2, r0
 8001f32:	4603      	mov	r3, r0
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d100      	bne.n	8001f3a <memset+0xa>
 8001f38:	4770      	bx	lr
 8001f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f3e:	e7f9      	b.n	8001f34 <memset+0x4>

08001f40 <_init>:
 8001f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f42:	bf00      	nop
 8001f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f46:	bc08      	pop	{r3}
 8001f48:	469e      	mov	lr, r3
 8001f4a:	4770      	bx	lr

08001f4c <_fini>:
 8001f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4e:	bf00      	nop
 8001f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f52:	bc08      	pop	{r3}
 8001f54:	469e      	mov	lr, r3
 8001f56:	4770      	bx	lr
